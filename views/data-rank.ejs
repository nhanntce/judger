<%- include ("partials/header") %>

<div class="container">

  <% if (message.length > 0) { %>
  <div class="alert alert-danger col-sm-12"><%=message %></div>
  <% } else { 
    var configContent = fs.readFileSync(storage.TESTCASE + data[0].contest_name + '/config.txt', 'utf8')
    var checkFormat = configContent.split('\n')[2].split('=')[1]
    var checkCmt = configContent.split('\n')[4].split('=')[1]
    var checkPlagiarism = configContent.split('\n')[8].split('=')[1]
  %>
  <script>

    $(document).ready(function () {
      jQuery.fn.dataTableExt.oSort["ranks-desc"] = function (x, y) {
        x = getRank(x);
        y = getRank(y);
        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
      };
      jQuery.fn.dataTableExt.oSort["times-asc"] = function (x, y) {
        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
      };
      function getRank(s) {
        if (s.split('<br>')[0].split('<center>')[1] == 'Not submit') return -1
        return parseFloat(s.split('<br>')[0].split('<center>')[1])
      }
      var x = setInterval(function () {
        var pro = (new Date().getTime() - parseInt('<%=data[0].time_begin.getTime()%>')) / (parseInt('<%=data[0].time_end.getTime()%>') - parseInt('<%=data[0].time_begin.getTime()%>')) * 100;

        if (pro <= 100 && pro >= 0) {
          $('#progress').attr('style', 'width:' + pro + '%');
          $('#progress').text((pro | 0).toString() + '%');
        } else if (pro > 100) {
          $('#progress').attr('style', 'width:100%');
          $('#progress').attr('class', 'progress-bar bg-danger');
          $('#progress').text('The Contest is Over');
          clearInterval(x);
          return;
        } else {
          $('#progress').attr('style', 'width:100%');
          $('#progress').attr('class', 'progress-bar bg-primary');
          $('#progress').text('The Contest is not open');
          clearInterval(x);
          return;
        }
      }, 100);
      var lastIndex = $("#dataTableRank").find('tr')[0].cells.length + $("#dataTableRank").find('tr')[1].cells.length - 2;
      var range = []
      range.push(lastIndex)
      for (var i = 1; i <= $("#dataTableRank").find('tr')[0].cells.length - 8; i++) {
        range.push(lastIndex - i)
      }
      function getHeaderNames(table, exportClass) {
    // Gets header names.
    //params:
    //  table: table ID.
    //Returns:
    //  Array of column header names.
    
    var header = $(table).DataTable().columns(exportClass).header().toArray();

    var names = [];
    header.forEach(function(th) {
     names.push($(th).html());
    });
        
    return names;
  }
  
  function buildCols(data) {
    // Builds cols XML.
    //To do: deifne widths for each column.
    //Params:
    //  data: row data.
    //Returns:
    //  String of XML formatted column widths.
    
    var cols = '<cols>';
    
    for (i=0; i<data.length; i++) {
      colNum = i + 1;
      cols += '<col min="' + colNum + '" max="' + colNum + '" width="20" customWidth="1"/>';
    }
    
    cols += '</cols>';
    
    return cols;
  }
  
  function buildRow(data, rowNum, styleNum) {
    // Builds row XML.
    //Params:
    //  data: Row data.
    //  rowNum: Excel row number.
    //  styleNum: style number or empty string for no style.
    //Returns:
    //  String of XML formatted row.
    
    var style = styleNum ? ' s="' + styleNum + '"' : '';
    
    var row = '<row r="' + rowNum + '">';

    for (i=0; i<data.length; i++) {
      colNum = (i + 10).toString(36).toUpperCase();  // Convert to alpha
      
      var cr = colNum + rowNum;
      
      row += '<c t="inlineStr" r="' + cr + '"' + style + '>' +
              '<is>' +
                '<t>' + data[i] + '</t>' +
              '</is>' +
            '</c>';
    }
      
    row += '</row>';
        
    return row;
  }
  
  function getTableData(table, title, exportClass) {
    // Processes Datatable row data to build sheet.
    //Params:
    //  table: table ID.
    //  title: Title displayed at top of SS or empty str for no title.
    //Returns:
    //  String of XML formatted worksheet.
    
    var header = getHeaderNames(table, exportClass);
    var table = $(table).DataTable();
    var rowNum = 1;
    var mergeCells = '';
    var ws = '';
    
    ws += buildCols(header);
    ws += '<sheetData>';
    
    if (title.length > 0) {
      ws += buildRow([title], rowNum, 51);
      rowNum++;
      
      mergeCol = ((header.length - 1) + 10).toString(36).toUpperCase();
      
      mergeCells = '<mergeCells count="1">'+
        '<mergeCell ref="A1:' + mergeCol + '1"/>' +
                   '</mergeCells>';
    }
                      
    ws += buildRow(header, rowNum, 2);
    rowNum++;
    
    // Loop through each row to append to sheet.    
    table.rows().every( function ( rowIdx, tableLoop, rowLoop ) {
      var data = table.cells(rowIdx, exportClass).data();
      data[3] = data[3].split('>')[1].split('<')[0];
      data[4] = data[4].split('>')[1].split('<')[0];
      // If data is object based then it needs to be converted 
      // to an array before sending to buildRow()
      ws += buildRow(data, rowNum, '');
      
      rowNum++;
    } );
    
    ws += '</sheetData>' + mergeCells;
        
    return ws;

  }
  
  function setSheetName(xlsx, name) {
    // Changes tab title for sheet.
    //Params:
    //  xlsx: xlxs worksheet object.
    //  name: name for sheet.
    
    if (name.length > 0) {
      var source = xlsx.xl['workbook.xml'].getElementsByTagName('sheet')[0];
      source.setAttribute('name', name);
    }
  }
  
  function addSheet(xlsx, table, title, name, sheetId, exportClass) {
    //Clones sheet from Sheet1 to build new sheet.
    //Params:
    //  xlsx: xlsx object.
    //  table: table ID.
    //  title: Title for top row or blank if no title.
    //  name: Name of new sheet.
    //  sheetId: string containing sheetId for new sheet.
    //Returns:
    //  Updated sheet object.
    
    //Add sheet2 to [Content_Types].xml => <Types>
    //============================================
    var source = xlsx['[Content_Types].xml'].getElementsByTagName('Override')[1];
    var clone = source.cloneNode(true);
    clone.setAttribute('PartName','/xl/worksheets/sheet' + sheetId + '.xml');
    xlsx['[Content_Types].xml'].getElementsByTagName('Types')[0].appendChild(clone);
    
    //Add sheet relationship to xl/_rels/workbook.xml.rels => Relationships
    //=====================================================================
    var source = xlsx.xl._rels['workbook.xml.rels'].getElementsByTagName('Relationship')[0];
    var clone = source.cloneNode(true);
    clone.setAttribute('Id','rId' + (sheetId + 1));
    clone.setAttribute('Target','worksheets/sheet' + sheetId +'.xml');
    xlsx.xl._rels['workbook.xml.rels'].getElementsByTagName('Relationships')[0].appendChild(clone);
    
    //Add second sheet to xl/workbook.xml => <workbook><sheets>
    //=========================================================
    var source = xlsx.xl['workbook.xml'].getElementsByTagName('sheet')[0];
    var clone = source.cloneNode(true);
    clone.setAttribute('name', name);
    clone.setAttribute('sheetId', sheetId);
    clone.setAttribute('r:id','rId' + (sheetId + 1));
    xlsx.xl['workbook.xml'].getElementsByTagName('sheets')[0].appendChild(clone);
    
    //Add sheet2.xml to xl/worksheets
    //===============================
    var newSheet = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'+
      '<worksheet xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:x14ac="http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac" mc:Ignorable="x14ac">'+
      getTableData(table, title, exportClass) +
      
      '</worksheet>';

    xlsx.xl.worksheets['sheet' + sheetId + '.xml'] = $.parseXML(newSheet);
    
  }
      var dataTableRank = $('#dataTableRank').DataTable({
        ajax: {
          url: "/load-rank?contest_id=<%=data[0].contest_id%>",
          type: "POST"
        },
        aaSorting: [[lastIndex, 'desc'], [4, 'asc']],
        aoColumnDefs: [
          { sType: "ranks", aTargets: lastIndex - 1 },
          { sType: "times", aTargets: 4 },
          {
            aTargets: [1, 2], 
            mRender: function (data, type, row, meta) {
              return '<a href="/detail-rank?rollnumber=' + row[1] + '">' + data + '</a>';
            }
          }, {
            bSearchable: false,
            bSortable: false,
            aTargets: 0
          }, {
            aTargets: 4,
            mRender: function (data, type, row, meta) {
              var minutes = Math.floor(data / 60000);
              return minutes;
            }
          },
          { visible: false, targets: range }
        ],
        lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]],
        dom: "<'row'l>" +
          "<'row'<'col-sm-6'B><'col-sm-6'f>>" +
          "<'row'<'col-sm-12'tr>>" +
          "<'row'<'col-sm-5'i><'col-sm-7'p>>",
        buttons: [{
          extend: 'excelHtml5',
          text: '<li class="fa fa-file-excel"></li> Export result into Excel',
          filename: '<%=data[0].contest_name.replace(/ /g, ' - ')%>',
          title: '',
          download: 'open',
          orientation: 'landscape',
          exportOptions: {
            columns: ['.export'],
            format: {
              body: function ( data, row, column, node ) {
                if (data.includes('<a')) {
                  return data.split('>')[1].split('<')[0]
                } else if (data.includes('<center')) {
                  return data.split('>')[1].split('<')[0]
                } else {
                  return data
                }
              }
            }
          },
          customize: function( xlsx ) {
            setSheetName(xlsx, 'Points');
            if (<%=checkFormat%>)
              addSheet(xlsx, '#dataTableRank', '', 'Formats', '2', '.exportFormat');
            if (<%=checkCmt%>)
            addSheet(xlsx, '#dataTableRank', '', 'Comments', '3', '.exportComment');
            if (<%=checkPlagiarism%>)
            addSheet(xlsx, '#dataTableRank', '', 'Plagiarisms', '4', '.exportPlagiarism');
          }
        }, {
          text: '<li class="fa fa-download"></li> Download source code',
          className: 'ml-1',
          action: function (e, dt, node, config) {
            window.location = '/contest/download?contest_id=<%=data[0].contest_id%>';
          }
        }
        ],
        language: {
          emptyTable: "<i class='	fa fa-sync fa-spin'></i> Loading"
        }
      });
      dataTableRank.on('order.dt search.dt', function () {
        dataTableRank.column(0, { search: 'applied', order: 'applied' }).nodes().each(function (cell, i) {
          if (i < 3) {
            cell.innerHTML = "<center><img src='./img/" + (i + 1) + ".png'></center>"
          } else {
            cell.innerHTML = "<center class='font-weight-bold'>" + (i + 1) + "</center>"
          }

        });
      }).draw();
      setInterval(function () {
        dataTableRank.ajax.reload();
      }, 20000);
    });
  </script>
  <div class="bc-icons">
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item"> <a class="text-gray-700" href="/rank">Rank</a></li>
        <li><i class="fas fa-angle-double-right mx-2 text-gray-700" aria-hidden="true"></i></li>
        <li class="breadcrumb-item text-gray-700 font-italic"><%= data[0].contest_name %></li>
      </ol>
    </nav>
  </div>
  <div class="row">
    <div class="col-md-3 text-left no-pad">
      <h5 class="font-weight-bold">Start</h5>
      <%= dayjs(data[0].time_begin).format('DD-MM-YYYY HH:mm') %>
    </div>
    <div class="col-md-6 text-center">
      <h3 class="title">Contest <%= data[0].contest_name %></h3>
    </div>
    <div class="col-md-3 text-right no-pad">
      <h5 class="font-weight-bold">End</h5>
      <%= dayjs(data[0].time_end).format('DD-MM-YYYY HH:mm') %>
    </div>
  </div>
  <div class="progress">
    <div id="progress" class="progress-bar progress-bar-striped progress-bar-animated bg-success"></div>
  </div>
  <br />
  <div class="card shadow mb-4">
    <div class="card-body">
      <div class="table-responsive">
        <table id="dataTableRank" class="table table-sm table-hover table-bordered" width="100%" cellspacing="0">
          <thead>
            <tr>
              <th rowspan="2" class="align-middle font-weight-bold" width="5%">Rank</th>
              <th rowspan="2" class="align-middle font-weight-bold export exportFormat exportComment exportPlagiarism" width="15%">Roll number</th>
              <th rowspan="2" class="align-middle font-weight-bold export exportFormat exportComment exportPlagiarism">Name</th>
              <th rowspan="2" class="align-middle font-weight-bold export exportFormat exportComment exportPlagiarism" width="5%">Class</th>
              <th rowspan="2" class="align-middle font-weight-bold" width="5%">Time</th>
              <% if (problem_files.length > 0) { %>
              <th colspan="<%=problem_files.length%>" class="text-center align-middle font-weight-bold export">Problem</th>
              <% } else { %>
              <th colspan="1" class="text-center align-middle font-weight-bold export">Problem</th>
              <% } %>
              <th rowspan="2" class="text-center align-middle font-weight-bold export" width="8%">Total</th>
              <th rowspan="2" class="text-center align-middle font-weight-bold export">Final</th>
              <% if (problem_files.length > 0) { %>
              <% for (let i = 0, l = problem_files.length; i < l; ++i) { %>
              <th rowspan="2" class="text-center exportFormat" width="8%">
                <%=data[i].problem_id%></a>
              </th>
              <% }} else { %>
              <th rowspan="2" class="text-center exportFormat" width="8%">None</th>
              <% } %>
              <% if (problem_files.length > 0) { %>
              <% for (let i = 0, l = problem_files.length; i < l; ++i) { %>
              <th rowspan="2" class="text-center exportComment" width="8%">
                <%=data[i].problem_id%></a>
              </th>
              <% }} else { %>
              <th rowspan="2" class="text-center exportComment" width="8%">None</th>
              <% } %>
              <% if (problem_files.length > 0) { %>
              <% for (let i = 0, l = problem_files.length; i < l; ++i) { %>
              <th rowspan="2" class="text-center exportPlagiarism" width="8%">
                <%=data[i].problem_id%></a>
              </th>
              <% }} else { %>
              <th rowspan="2" class="text-center exportPlagiarism" width="8%">None</th>
              <% } %>
            </tr>
            <tr>
              <% if (problem_files.length > 0) { %>
              <% for (let i = 0, l = problem_files.length; i < l; ++i) { %>
              <th class="text-center export" width="8%">
                <a href="<%=data[i].path_problem.replace('/public', '.')%>" target="_blank" data-toggle="tooltip"
                  data-placement="bottom" title="<%=path.basename(data[i].path_problem)%>"><%=data[i].problem_id%></a>
              </th>
              <% }} else { %>
              <th class="text-center export" width="8%">None</th>
              <% } %>
            </tr>
          </thead>
          </table>
        </table>
      </div>
    </div>
  </div>
  <% } %>
</div>
<%- include ("partials/footer") %>