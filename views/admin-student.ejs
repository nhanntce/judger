<%- include ("partials/header-admin" ) %>
<script>
  $(document).ready(function () {
    let e = $("#dataTableStudent").DataTable({
      processing: true,
      serverSide: true,
      ajax: '/admin/student-data',
      columnDefs: [{
        searchable: !1,
        orderable: !1,
        className: "select-checkbox",
        defaultContent: "",
        targets: 0
      }, {
        targets: 7,
        mRender: function (data, type, row, meta) {
          return data.toLocaleString("it-IT")
        }
      }
      ],
      select: {
        style: "multi",
        selector: "td:first-child"
      }
    });
    e.on("select deselect draw", function () {
      var t = e.rows({
        search: "applied"
      }).count();
      e.rows({
        selected: !0,
        search: "applied"
      }).count() < t ? $("#MyTableCheckAllButton i").attr("class", "far fa-square") : $("#MyTableCheckAllButton i").attr("class", "far fa-check-square");
      var l = e.rows({
        selected: !0
      }).data().toArray()
      if (l.length == 1) {
        $("#btnedit").prop('disabled', false);

        // $.ajax({url: '/admin/list-class', success: function(result){
        //   for(let i = 0, len = result.length; i < len; i++) {
        //     if()
        //   }
        // }});
        document.getElementById("edit_id_student").value = l[0][9]
        document.getElementById("edit_id").value = l[0][1]
        document.getElementById("edit_rollnumber").value = l[0][2]
        document.getElementById("edit_email").value = l[0][3]
        document.getElementById("edit_name").value = l[0][4]
        // document.getElementById("edit_class").value = class_edit_id;
        if(document.getElementById("class_id" + l[0][5]) != null){
          document.getElementById("class_id" + l[0][5]).style.display = 'inline';
          document.getElementById("class_id" + l[0][5]).setAttribute("selected", "selected");
        }
        document.getElementById("edit_timeout").value = l[0][7]
        console.log(l[0][7])
      }
      if (l.length < 1 || l.length > 1) {
        $("#btnedit").prop('disabled', true);
      }
      a = [];
      for (let e = 0; e < l.length; ++e) a.push(l[e][1]);
      if (a.length == 0) {
        $("#btnreset").prop('disabled', true);
      } else {
        $('#btnreset').prop('disabled', false);
        document.getElementById("list_id").value = a
      }
      if (l.length < 1 || l.length > 1) {
        $("#btnedit").prop('disabled', true);
      }
    }), $("#MyTableCheckAllButton").click(function () {
      var t = e.rows({
        search: "applied"
      }).count();
      e.rows({
        selected: !0,
        search: "applied"
      }).count() < t ? (e.rows({
        search: "applied"
      }).deselect(), e.rows({
        search: "applied"
      }).select()) : e.rows({
        search: "applied"
      }).deselect()
    })
  })
</script>


<div class="container-fluid mt-4">
  <div class="bc-icons">
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item text-gray-700 font-italic">Student</li>
      </ol>
    </nav>
  </div>
  <% if (message.length > 0) { %>
  <script>toastr.success('<%=message%>')</script>
  <% } %>
  <% if (error.length > 0) { %>
  <script>toastr.error('<%=error%>')</script>
  <% } %>


  <button type="button" class="btn btn-outline-blue waves-effect btn-sm" data-toggle="modal"
    data-target="#myModalAdd"><i class="fa fa-plus fa-lg"></i> Add a new student</button>
  <button type="button" class="btn btn-outline-blue waves-effect btn-sm"
    onclick="window.location='/contest/add-class';"><i class="fa fa-plus fa-lg"></i> Add students by class</button>
  <button type="button" id="btnedit" class="btn btn-outline-blue waves-effect btn-sm" data-toggle="modal"
    data-target="#myModalEdit"><i class="fa fa-edit fa-lg"></i> Edit</button>
  <button type="button" id="btnreset" class="btn btn-outline-blue waves-effect btn-sm" data-toggle="modal"
    data-target="#centralModalSm"><i class="fa fa-sync fa-lg"></i> Reset</button>
  <div class="table-responsive">
    <table class="table table-hover table-bordered" id="dataTableStudent" width="100%" cellspacing="0">
      <thead>
        <tr>
          <th class="text-center" width="5%">
            <button type="button" style="border: none; background: transparent; font-size: 14px;"
              id="MyTableCheckAllButton"><i class="far fa-square"></i></button>
          </th>
          <th>ID</th>
          <th>Roll number</th>
          <th>Email</th>
          <th>Name</th>
          <th>Class</th>
          <th>Online</th>
          <th>Time out</th>
        </tr>
      </thead>
    </table>
  </div>
</div>
<!-- The Modal add a student-->
<div class="modal fade" id="myModalAdd" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header text-center">
        <h4 class="modal-title w-100 font-weight-bold">Add a new student</h4>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form action="/admin/add-student" method="POST" id="add-new-form" onsubmit="return false;">
        <div class="modal-body mx-3">
          <div class="form">
            <label><i class="fas fa-id-card"></i> Roll Number</label>
            <input type="text" id="rollnumber" name="rollnumber" class="form-control" autocomplete="rollnumber">
            <scan class="text-danger" id="rollnumber_error" style="display: none;"></scan>
          </div>
          <div class="form">
            <label><i class="fas fa-user-alt"></i> Name</label>
            <input type="text" id="name" name="name" class="form-control" autocomplete="name">
            <scan class="text-danger" id="name_error" style="display: none;"></scan>
          </div>
          <label><i class="fas fa-users"></i> Class</label>

          <div class="row">
            <div class="col-10">
              <div class="form">
                <select class="form-control" name="class_id" id="class_id">
                  <% 
                    for(let i = 0 ; listClass.length > i ; i++) {
                  %>
                    <option value="<%=listClass[i].id%>"><%=listClass[i].semester + '_' + listClass[i].subject + '_' + listClass[i].class_name%></option>     
                  <% 
                    } 
                  %>         
                </select>
              </div>
            </div>
            <div class="col-2">
              <a href="/admin/class" class="btn btn-outline-blue waves-effect btn-sm">New</a>
            </div>
          </div>
          <!-- <div class="md-form">
            <i class="fas fa-users prefix grey-text"></i>
            <input type="text" id="class" name="class" class="form-control validate">
            <label data-error="wrong" data-success="" for="orangeForm-email">Class</label>
          </div> -->
          <div class="form">
            <label><i class="fas fa-envelope"></i> Email</label>
            <input type="email" id="email" name="email" class="form-control" autocomplete="email">
            <scan class="text-danger" id="email_error" style="display: none;"></scan>
          </div>
          <!-- <div class="md-form">
            <i class="fas fa-user prefix grey-text"></i>
            <input type="text" id="username" name="username" class="form-control validate">
            <label data-error="wrong" data-success="" for="orangeForm-pass">Username</label>
          </div>
          <div class="md-form">
            <i class="fas fa-unlock-alt prefix grey-text"></i>
            <input type="password" id="password" name="password" class="form-control validate">
            <label data-error="wrong" data-success="" for="orangeForm-pass">Password</label>
          </div> -->
        </div>
        <div class="modal-footer d-flex justify-content-center">
          <button class="btn btn-deep-orange" id="button-add-new-student">Add</button>
        </div>
      </form>
    </div>
  </div>
</div>
<!-- The Modal edit a student-->
<div class="modal fade" id="myModalEdit" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header text-center">
        <h4 class="modal-title w-100 font-weight-bold">Edit a student</h4>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form action="/admin/edit-student" method="POST" id="form-edit-student">
        <div class="modal-body mx-3">
              <div class="md-form">
                <input placeholder="Placeholder" type="hidden" id="edit_id_student" name="edit_id_student" class="form-control validate" readonly="">
              </div>
              <div class="form">
                <label><i class="fas fa-id-card"></i> ID</label>
                <input placeholder="Placeholder" type="text" id="edit_id" name="edit_id" class="form-control validate" readonly="">
              </div>
              <div class="form">
                <label><i class="fas fa-id-card grey-text"></i> Roll Number</label>
                <input type="text" id="edit_rollnumber" name="edit_rollnumber" class="form-control" autocomplete="edit_rollnumber"/>
                <scan class="text-danger" id="rollnumber_edit_error" style="display: none;"></scan>
              </div>
              <div class="form">
                <label><i class="fas fa-envelope"></i> Email</label>
                <input type="email" id="edit_email" name="edit_email" class="form-control" autocomplete="edit_email"/>
                <scan class="text-danger" id="email_edit_error" style="display: none;"></scan>
              </div>
              <div class="form">
                <label><i class="fas fa-user-alt"></i> Name</label>
                <input type="text" id="edit_name" name="edit_name" class="form-control" autocomplete="edit_name"/>
                <scan class="text-danger" id="name_edit_error" style="display: none;"></scan>
              </div>
              <div class="form">
                <label><i class="fas fa-clock"></i> Time out</label>
                <input type="text" id="edit_timeout" name="edit_timeout" class="form-control" readonly="">
              </div>
              <label><i class="fas fa-users"></i> Class</label>
              <div class="row">
                <div class="form col-10">
                  <select class="form-control" name="edit_class" id="edit_class">
                    <% 
                      for(let i = 0 ; listClass.length > i ; i++) {
                    %>
                    <option id="class_id<%=listClass[i].semester + '_' + listClass[i].subject + '_' + listClass[i].class_name%>" value="<%=listClass[i].id%>"><%=listClass[i].semester + '_' + listClass[i].subject + '_' + listClass[i].class_name%></option>     
                    <% 
                      } 
                    %>         
                  </select>
                </div>
                <div class="md-form col-2">
                  <a href="/admin/class" class="btn btn-outline-blue waves-effect btn-sm">New</a>
                </div>
              </div>
              
            <div class="modal-footer d-flex justify-content-center">
          <button class="btn btn-deep-orange" id="button-edit-student">Update</button>
        </div>
          </div>
        </div>
    </form>
    </div>
  </div>
</div>
<!-- Central Modal Small -->
<div class="modal fade" id="centralModalSm" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
  aria-hidden="true">
  <div class="modal-dialog modal-sm" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title w-100" id="myModalLabel">Reset Students</h4>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form action="/admin/reset-student" method="POST">
          <div class="custom-control custom-checkbox">
            <input type="checkbox" class="custom-control-input" id="defaultChecked2" name="contest_id" checked="" disabled="disabled">
            <label class="custom-control-label" for="defaultChecked2">Students IP</label>
          </div>
          <!-- <div class="custom-control custom-checkbox">
            <input type="checkbox" class="custom-control-input" id="defaultChecked1" name="contest_id">
            <label class="custom-control-label" for="defaultChecked1">Students Contest ID</label>
          </div> -->
          <input type="hidden" id="list_id" name="list_id">
          <button type="submit" class="btn btn-success btn-sm float-right"><i class="fa fa-check"></i> OK</button>
        </form>
      </div>
    </div>
  </div>
</div>
</div>
<script>
    //validation form
    //add a new student
    let rollNumber = document.getElementById('rollnumber');
    let name = document.getElementById('name');
    let email = document.getElementById('email');
    let rollNumberError = document.getElementById('rollnumber_error');
    let emailError = document.getElementById('email_error');
    let nameError = document.getElementById('name_error');
    let buttonAddNewStudent = document.getElementById('button-add-new-student');
    let addNewForm = document.getElementById('add-new-form');

    /**
     * check duplicate roll number
     * @author NhanNT
     * @return {Boolean} [description]
     */
    async function isNotValidateRollNumber() {
      let rollNumberValue = rollNumber.value;
      let studentList = await ajaxPromise('/admin/list-students');
      rollNumberError.style.display = 'none';
      if(rollNumberValue.trim() === '') {
        rollNumberError.style.display = 'inline';
        rollNumberError.innerHTML = "Roll number can't be empty!";
        return  true;
      }
      if(!(/\b[A-Za-z]{2}[0-9]{6}\b/.test(rollNumberValue))) {
        rollNumberError.style.display = 'inline';
        rollNumberError.innerHTML = "Roll number must follow the format (Ex: CE130377)";
        return  true; 
      } 
      for(let i = 0, len = studentList.length; i < len; i++) {
        if(rollNumberValue.toLowerCase() === studentList[i].rollnumber.toLowerCase()) {
          rollNumberError.innerHTML = "Roll number is exists!";
          rollNumberError.style.display = 'inline';
          return true;
        }
      }
      return false;
    }
    /**
     * check duplicate email
     * @author NhanNT
     * @return {Boolean} [description]
     */
    async function isNotValidateEmail() {
      let emailValue = email.value;
      let studentList = await ajaxPromise('/admin/list-students');
      emailError.style.display = 'none';
      //check email empty
      if(emailValue.trim() === "") {
        emailError.style.display = 'inline';
        emailError.innerHTML = "Email can't be empty!";
        return true;
      }
      if(!(/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(emailValue))) {
        emailError.style.display = 'inline';
        emailError.innerHTML = "Email is wrong fotmat!";
      }
      for(let i = 0, len = studentList.length; i < len; i++) {
        if(emailValue.toLowerCase() === studentList[i].email.toLowerCase()) {
          emailError.innerHTML = "Email is exists!";
          emailError.style.display = 'inline';
          return true;
        }
      }
      return false;
    }
    /**
     * [isValidateName description]
     * @return {Boolean} [description]
     */
    function isValidateName() {
      let nameValue =  name.value;
      nameError.style.display = 'none';
      //check name empty
      if(nameValue.trim() === '') {
        nameError.style.display = 'inline';
        nameError.innerHTML = "Name can't be empty!";
        return false;
      }
      return true;
    }
    
    /**
     * ajax promise
     * @author NhanNT
     * @param  {[type]} url [description]
     * @return {[type]}     [description]
     */
    function ajaxPromise(url) {
      return new Promise((resolve, reject) => {
        $.ajax({url: url, success: function(result){
          resolve(result);
        }});
      });
    }
    /**
     * check validate add new student
     * @param  {[type]} e [description]
     * @return {[type]}   [description]
     */
    async function checkValidationAddNew(e) {
      e.preventDefault();
      //declare variable
      let returnValue = true;
      //check duplidate rollnumber
      isNotValidateRollNumber()
      if(await isNotValidateRollNumber()) {
        returnValue = false;
      }
      //check duplidate email
      if(await isNotValidateEmail()) {
        returnValue = false;
      }
      //check name empty
      if(!isValidateName()) {
        returnValue = false;
      }
      if(returnValue){
        addNewForm.submit();
      }
      return returnValue;
    }   
   
    rollNumber.addEventListener('keyup', isNotValidateRollNumber);
    email.addEventListener('keyup', isNotValidateEmail);
    name.addEventListener('keyup', isValidateName);
    buttonAddNewStudent.addEventListener('click', checkValidationAddNew);
    //===========================Check validation edit form===============================
    let rollNumberEdit = document.getElementById('edit_rollnumber');
    let nameEdit = document.getElementById('edit_name');
    let emailEdit = document.getElementById('edit_email');
    let editIdStudent = document.getElementById('edit_id');

    let rollEditNumberError = document.getElementById('rollnumber_edit_error');
    let emailEditError = document.getElementById('email_edit_error');
    let nameEditError = document.getElementById('name_edit_error');
    let buttonEditStudent = document.getElementById('button-edit-student');
    let formEditStudent = document.getElementById('form-edit-student');

    /**
     * check duplicate roll number
     * @author NhanNT
     * @return {Boolean} [description]
     */
    async function isNotValidateEditRollNumber() {
      let rollNumberValue = rollNumberEdit.value;
      let studentList = await ajaxPromise('/admin/list-students?user_id_student=' + editIdStudent.value);
      rollEditNumberError.style.display = 'none';
      console.log(studentList);
      if(rollNumberValue.trim() === '') {
        rollEditNumberError.style.display = 'inline';
        rollEditNumberError.innerHTML = "Roll number can't be empty!";
        return  true;
      }
      if(!(/\b[A-Za-z]{2}[0-9]{6}\b/.test(rollNumberValue))) {
        rollEditNumberError.style.display = 'inline';
        rollEditNumberError.innerHTML = "Roll number must follow the format (Ex: CE130377)";
        return  true; 
      } 
      for(let i = 0, len = studentList.length; i < len; i++) {
        if(rollNumberValue.toLowerCase() === studentList[i].rollnumber.toLowerCase()) {
          rollEditNumberError.innerHTML = "Roll number is exists!";
          rollEditNumberError.style.display = 'inline';
          return true;
        }
      }
      return false;
    }
    /**
     * check duplicate email
     * @author NhanNT
     * @return {Boolean} [description]
     */
    async function isNotValidateEditEmail() {
      let emailValue = emailEdit.value;
      let studentList = await ajaxPromise('/admin/list-students?user_id_student=' + editIdStudent.value);
      emailEditError.style.display = 'none';
      //check email empty
      if(emailValue.trim() === "") {
        emailEditError.style.display = 'inline';
        emailEditError.innerHTML = "Email can't be empty!";
        return true;
      }
      if(!(/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(emailValue))) {
        emailEditError.style.display = 'inline';
        emailEditError.innerHTML = "Email is wrong fotmat!";
      }
      for(let i = 0, len = studentList.length; i < len; i++) {
        if(emailValue.toLowerCase() === studentList[i].email.toLowerCase()) {
          emailEditError.innerHTML = "Email is exists!";
          emailEditError.style.display = 'inline';
          return true;
        }
      }
      return false;
    }
    /**
     * [isValidateName description]
     * @return {Boolean} [description]
     */
    function isValidateEditName() {
      let nameValue =  nameEdit.value;
      nameEditError.style.display = 'none';
      //check name empty
      if(nameValue.trim() === '') {
        nameEditError.style.display = 'inline';
        nameEditError.innerHTML = "Name can't be empty!";
        return false;
      }
      return true;
    }
    /**
     * check validate add new student
     * @param  {[type]} e [description]
     * @return {[type]}   [description]
     */
    async function checkValidationEdit(e) {
      e.preventDefault();
      //declare variable
      let returnValue = true;
      //check duplidate rollnumber
      isNotValidateRollNumber()
      if(await isNotValidateEditRollNumber()) {
        returnValue = false;
      }
      //check duplidate email
      if(await isNotValidateEditEmail()) {
        returnValue = false;
      }
      //check name empty
      if(!isValidateEditName()) {
        returnValue = false;
      }
      if(returnValue){
        formEditStudent.submit();
      }
      return returnValue;
    }   

    rollNumberEdit.addEventListener('keyup', isNotValidateEditRollNumber);
    emailEdit.addEventListener('keyup', isNotValidateEditEmail);
    nameEdit.addEventListener('keyup', isValidateEditName);
    buttonEditStudent.addEventListener('click', checkValidationEdit);
    //check class validation
    let btnEdit = document.getElementById('btnedit');

    function checkClass() {
      let id_student = document.getElementById("edit_id_student").value;
      let id_class_current = document.getElementById("edit_class").value;
      let url = '/admin/list-class?id_student=' + id_student + '&id_class=' + id_class_current;
      console.log(url);
      displayAllClass();
      $.ajax({url: url, success: function(result){
          for(let i = 0, len = result.length; i < len; i++) {
            document.getElementById('class_id' + result[i].semester + '_' + result[i].subject + '_' + result[i].class_name).style.display = 'none';
          }
      }});
    }
    function displayAllClass() {
      <% 
        for(let i = 0 ; listClass.length > i ; i++) {
      %>
      document.getElementById("class_id<%=listClass[i].semester + '_' + listClass[i].subject + '_' + listClass[i].class_name%>").style.display = 'inline';
      <% 
        } 
      %>   
    }
    btnEdit.addEventListener('click', checkClass);


</script>
<%- include ("partials/footer-admin" ) %>